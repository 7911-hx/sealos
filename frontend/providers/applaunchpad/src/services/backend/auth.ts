import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from "@kubernetes/client-node";

import fs from 'fs';

export const getUserKubeConfigMock = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return config;
}

export const getUserKubeConfig = () => {
  const temp = `apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJME1ETXhPREEyTXpneU9Gb1lEekl4TWpRd01qSXpNRFl6T0RJNFdqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCm9hcHppWmFCVGRSQlZIamlJMW9yY2d3S2FZMU9xbVFWRDNJN1pmR2E3TFJIeUhyblc0SHVFRjV4bUR3QXk5RU4KU245d05RV1hiS213MFBqb3AzbnpMVm1tOVdHUS9lRGNtTU1ELzB0NHVJbFBuNE9mRnphbk92UWl2S1V0Y0krNwptdjY1THNFemRFVUZ3NWJINHlvT2JBbEl3U0V5KzduT1lyRy9seCswdlJHWUJURFRZek0vV1NrMURNcmtnTlhFClZuWjJYNHNpWUZiaHU1U0ZrMWJ0ZmZWYXJIeDcxMENLWFhHdXdvaElGeXR6NTZJMkZCcDVKcmJNd3ZJUitpcTcKVytMVHJYeHp0YUhsZGo1aXdMKzBZbjhwb2kySTV5UHhjSnE0ZzgwYXBaWWlUSGNGWDRYeTdtZDhiUkxhUXhHTQo5eE9OVkozbXdxMkt3dHF1ek0rNHV3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVKVjJpbkpseTZuTDdsSlJlWC8rV01aVjFQbm93RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFHSERwQzFqdEwvNVVnckZsRExwMmh1bXhCRk5wNkJPUkIxdkUyK1Q4Zmx4bnA5NgpSQW1Ha1VNYUR2YmhsOHU4Y3ZuNVFoanVLVWRlNU1weVdUMlNaK2ZmMFk0eDhNcUk4a2plSVJWczkxQzdYQ0tnCjkxS09maTExT1orRGVQTVYycWFXVk5FMjlUaHdUcVV2bjZ1VW1TYkhJc1N2Yml5blU3T1BHVWlUNHFQcllJZ3QKUEtGRVR0UzhCcC9pelNIdUxURGZsTStraGhNaXRPRjZYdmRscTJZVmp3N2hwd2xvNzdBbEhZa3VZSVZZaUpzLwpmMWhBM0d2bi9EUzczemZNcW50WjIzY1E5SzRSTTJaUUNrbEw1bENYTFdpWjdUaUdSOHhEdzdBMmxETHRQKzVpCmxveVBKN2g3VGRCSlI4b3FncnBBRzdiclh0RGF5ajBNUXUyQ2p3az0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://apiserver.cluster.local:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJUmhyMkhqa2JzVGd3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TkRBek1UZ3dOak00TWpoYUdBOHlNVEkwTURJeU16QTJNemd6TVZvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREEzTW01ODNHaGRadFQKTHBSOHVVSVdaaXdKMjFxQWxkV2lpNVFxeVNpUW00VDlZenlCV0NpaTA5KzJTazdvOWNHN2xnMVJ0M0RlVlR6Mgo1MW9CRThSTlgxeDJBU3lYMEFmdnJucWIrUXBCa3llNVJqWXNsNGExSkozNTh3SW1GcGlFd2I0cEVFVko0MWFiCjd1NnVHSGIzdWgwM1F5WTUzRFFUNFZRZkFSVDJEcGlBbUhEcWYvUUY1ZVRKb2RxM3gvczh4VHZrU2NEUGMxclIKVU9SdmduRGpVNVlUdWhObHJ4RXh6ZHBUcDhRdVZmQVNLcTA2VWJJclRaVmdnemxxemMzM2VJeWpsMi90OUNURApYTFJjZXEvK3RlUDI5NG40dk1sWk5aaXY1aE44eDZhQ242eWM3Y0I1TytGcHQrK1kxQ1VXb1lnN2JrN0RFZi9YCmZXTnhtTytoQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlFsWGFLY21YTHFjdnVVbEY1Zi81WXhsWFUrZWpBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFjQTU1dC9vb1BoUE1WODVFMklRSHB4R0NqTWp2d21sVlR4dnVIZjJwWFR0ZVpvV0RFRGpYCkVuQVFueFRHVGR4RlpEU2lPajVyNGZiTXZaZnVHMjRRbmJPZ3dzT2RtQ05iSER0Y0V2MkZyejk4Rm9PNXZ3dmcKMGF6ZzdVajVDQUdWRWxNaldiTngvczQ4bll5Vk1lVGNFQUhOaERxYi84aHBQL1dQK1Q4OW5TK1lJNVcxR1VVeQpaWU9HRThGL2NyNjlhWDRMM0NsYlNwdjFaeXJ4MzA5YWp0Qy9JUEp4RVk1YW90cGkvMHJVYUU3N2Mrc0RuUXIzCnR5TnJjT01KSWFja0hzK0JReHFUYmVoRmVrMmhOWkovWWxpdnNQVnRpa0dwR2p2SlhaMUdSTG1JdXAxWlIxSHAKN2V6Ykc3SGNDdkV6R3ExMTNGQUUvcGxucHBCbE8vS0FLUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBd056SnVmTnhvWFdiVXk2VWZMbENGbVlzQ2R0YWdKWFZvb3VVS3Nrb2tKdUUvV004CmdWZ29vdFBmdGtwTzZQWEJ1NVlOVWJkdzNsVTg5dWRhQVJQRVRWOWNkZ0VzbDlBSDc2NTZtL2tLUVpNbnVVWTIKTEplR3RTU2QrZk1DSmhhWWhNRytLUkJGU2VOV20rN3VyaGgyOTdvZE4wTW1PZHcwRStGVUh3RVU5ZzZZZ0podwo2bi8wQmVYa3lhSGF0OGY3UE1VNzVFbkF6M05hMFZEa2I0Snc0MU9XRTdvVFphOFJNYzNhVTZmRUxsWHdFaXF0Ck9sR3lLMDJWWUlNNWFzM045M2lNbzVkdjdmUWt3MXkwWEhxdi9yWGo5dmVKK0x6SldUV1lyK1lUZk1lbWdwK3MKbk8zQWVUdmhhYmZ2bU5RbEZxR0lPMjVPd3hILzEzMWpjWmp2b1FJREFRQUJBb0lCQUI5YVJUa0RpRzkxRFFFaQp5MlRUUVJrZkZ2MnJPVFU2Sm5hOE5pUVdlNCsybUpJUXRkOVpFNUlVMjRObzVSY2VESmFRT0M0V29qU2lxcnlBCnM3TUZJWjVxYUQrT3hVOFF0Sm1VUmI1aFovZHRFc0lkMWVTOTVWcEJUNlU0aWhyakJYeGZlcWgyU3ExT1ZlQVgKb1ptUHhKZFZIRGJGcGNzMkx3a2tVbWFQNkhadmRLRnNmMm1oWnVvd2NqOHNKdW9ya3gvUWNIaHdVTlFpRmJTRAphN3IyRHhoRHMrK29oaFRjbXFmRFdGQ01QMStSdDdNMlgvUVhMTWJZT3h2a05SNzlYbVhnTTQ1d2U5OWYvcHkvCnJhZnlEbWhxdG1ORlAxWXhuWjZBMUpMODVWcEZPazNVWENxeXhtR3pSaFNtK3NScEh6YTBta3Y0QTVOZ1lETWIKKzJwMHExa0NnWUVBMGFzaUl2V3MzK3NJZnFBOU9GbUpZV2RwV0xrWC9RREYvNnJ5UzBSSWdqeWE3VUU0MFV0cQp3ZEhYWkJOYkhqS2Q5dWVldCtsbmZuak5CdjZMOFZwcGpMMW1LbC9SMzVQZjNqSWVkdzlCN0toMHR6QnE0Q1QvCks4SDhjWUlHMzJNOFJpcDZzTEVDVkVVWmU0endzeDZ4emFCU1pSeWlKYlF4S0w4T0s5ZnFMdHNDZ1lFQTYzcngKalFFUE81NGZ3V0lYUXFGMjhOVFhQamM4NGpkM3VtN0R0RnduU09VSVBMV1FRaDRMLzYvNlRmdGZQNVA4TzEzUwpZY1VLcXUwbjJBMGRFLzFOR3lLLzducllHejE5Q2xXQVR1WktWK3NES1hYR09KNDY4L0pIMVNadmp3czFvUFNtCmYzbjBKS0tnTjNEcHFMZGNqRHVpeDh4UytLM21lUnV5clR2RzdqTUNnWUVBcWhjNDFEK1ZoUG00cEhEOStTNjUKd21rUUQwZm82L2lxcDZSWWR6TG4xNit1eDNZM3o2SnM4dHQyN3RxOCtweDVoWW1WT3dHQVVodFJ5TERMZW5xcwpVZDU4ZVRmT25KL3I1dWVseTFSM1dMTzRLN3g5bDJTc0ZTV0QwOWwyRmRiOVdMYXhYWkhibjkyR3RMSTd1alBXCmJrZjNUOHVReHlHTkY4OFdnZjdoSGkwQ2dZRUFpcnFwcUJxaHNNdmRoWDZXbVlpcW5BT29zMXl6bjhweDNRSDQKaGo5c1hZT2hNTEwreEJVVG1KVkNiOExTUUpDY254VU5KdENCRW1ZWmZTMXNuaVF5MHZQTUEyR1lBNlJjRUVTRApEUGliZitSU3ZwQkdNWUQyMWxVOGdKVGVVSFdZS0xVNWlneDlDMEJNQjUyYjZ1dnJ1Q3BDSWxkNzRrb0JhQVFyClplZTdzUVVDZ1lFQTBYVTM2VnYveml0bEQyd1g3MVFZaWtlOUowOWZuUnllOHh0bFAxQ2VpTHZidlRTTGRJWEUKbjNKODVhaXVwVXdzYjFVbEZKeDRrZzJIMzM3TkZHU1VsaU9vd3BlenlvQjVoTnVCQjlmSTRrK3ZXOHUwdUJnaQpsT3l3Ym0ra3BoTjdIWThFbzBpcGt3WmNqNFVkZ0lUTDBpSzU1QjhoU1pBSGhEMHJBeUd5K3lnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
`;

  return temp;
}

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  const authorization = getUserKubeConfig();
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
