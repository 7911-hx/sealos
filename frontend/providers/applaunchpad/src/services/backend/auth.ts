import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return config;
};

export const getUserKubeConfigMock = () => {
  const temp = `
  apiVersion: v1
  clusters:
  - cluster:
      certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJME1EVXlNekEzTkRNMU4xb1lEekl4TWpRd05ESTVNRGMwTXpVM1dqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnRQWWVhTGxLWkpBRDF2VFJiTWs4RDVSUG1oa1IxSit5UXBCVndJS1MxNW44dGpBdGQ4aGI3Z1ZzRXJlWXJPVnkKYU1iNEh5aEJMMUl2VFc2R0ltTkxwUzc4ZElzZ3VUZjVNUlJDa2Z5c2lwOXVXWUtlbVRnNGE0VTZVSmxuaWk0ZwpmZkNrRXhBZkVCckxpS3RNdVk3bE1LTnFBQzJRWlgva1RJYVQvamFXZTAvd3VTMy9idnBSQm5RV09qbUl1Y1NCCnBsYjk2RGNsS3pWenBvblAzWVVacm9NWkgrUHVKWHlnZWIvVHFkanVsajlmRHBtUllhVDFCKzJ3cVp5dXZsWFUKV01neHFBUHlEM0g1TFpIU21YOEE0ZVc2Kzg2bjAzY0VLckMvMUhqMjNzUUx5TEpZcmJybFNmREZnWDhnRTgvdgo5Y1hxRXZrQjBZV3FVTGo5NDJaa3FRSURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVPMk1VaitOcWlocDVxU0NBd1o0Wmh2dHBVUVl3RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFBSGJKbllUSjZHQUg4NlVoLzAwOHgzLzFFRDNCWkw4NUtSRXdNSGdoc3lJRkZtYwp6cHlJMUJaekR2dkpxd0o2R1ZHdFRrbTFyaDVGc2FjaUZzcVV4dm1xTTNmWm16V0N2V2ROTWtGOUZPSTBPK1BnClNsOEx3dXZHeHpBbjR2VkFQbTdRS25QOHpYVzRnODFudkFrSVp5MnBaNm1uRFZjMnJRakRXMHU3UW1rZXhVTWsKQkJMZzhRNDR2VjRDWXRmUVRkZklUdVdWbG5YS0R1YlBORllXd1pRUE5XRWQwV2diREIwK2tNWFpGNUNMdWM3VApGM0xpRXVQSUFGckdlbHg2OVF3WTBlc2djMjY0Z3lEL0VYVFJQTjMvZXFBc05mc3hLeEdrSjZwUHZqc1F2WURwCjlPaVJtNUdOTlliYmVjSUNWck5KVGNwNHZEamhtc3dPbEd2dkRhRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
      server: https://121.40.189.30:6443
    name: kubernetes
  contexts:
  - context:
      cluster: kubernetes
      user: kubernetes-admin
    name: kubernetes-admin@kubernetes
  current-context: kubernetes-admin@kubernetes
  kind: Config
  preferences: {}
  users:
  - name: kubernetes-admin
    user:
      client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJQ1BtMW9TVlpmSTh3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TkRBMU1qTXdOelF6TlRkYUdBOHlNVEkwTURReU9UQTNORE0xT1ZvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREJpVEdVc1BzUkdQVEcKNVFFMzB0OHgrOGVVV3ZMbjJyeVppMkhhaHkwdktIck0vdUNJVkxoUDJsaEpaa3o5eXVoODF5Z0R6c0czWVBKMwpZMHV6cXNsTmxUZXhrOGZqeXVxVkF5eGFTZXl0SU5hbkZTaW0zbDFlR2JRWFllYkRCdFF3QkFwNXJsWFJUdVp2Cm0rU3RQMzU2RjI0amdSK2FkYnkxLzB3b0NyeFAvdlk2bThuUUV2bVBsamE5cDNpWFNEOEVWdCsxVzlVdzdyTFoKYlhvWC96NWZES2w2RWErcmNZLzF0WkxKcy9GNFV6czJDcDlUUFV0cFk3TzZ3K2tjV205S1JCaUlsQ1hiYjNuQwpyTmpnRFVoM1BnWWpMNkhtY1FWZFdWbFFEVzd3VFpPdW83ODh2STVWVHFRR0pGZXJiUXc2Z3RnWjFkMCtUS3owCkk3QUtrdm1OQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlE3WXhTUDQycUtHbm1wSUlEQm5obUcrMmxSQmpBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFQaWhFelZrcmp4NE03NSt0OGlBUml0dEdiQkVsY2JBaFk1NFRicVNOR010WVU3bTVkQUVxCnUwN3pwUWEyOXkyVG5UY3BETVJPT3NHamJwQ2pZUUdEVzZXUkJTMG5mT1dGL29Vck8xYVNubm1WRTNoOS81bGkKN0t3TXJ6YS96N1NSK1ViYzhxbTdUK1VmeEFnMC9OTXc1aWJIanBsSS8rYTgyOTFPT3B2NXVycDMyTTVGMVpPSgp1aHBFWHl4Q2krTVo5M3RqZEl3dTgxMFZPVEJJb0lkM1BpMHF1UDBHeUNjVDhiYVFTNEZtcmU1YlhXQ0lUY3F2CjVTNWpuVDZ2K1FpNlZpaHZyRmlxUnpOck5wZkJyRkVmNStVeGRkdFBKYzl4NmlTblRBUit2bUk5TExtVC84aFUKVWkyU3VwZHJDY1dOUk5HeEdUWE1vdktsdGRCU1lyMDlTUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd1lreGxMRDdFUmoweHVVQk45TGZNZnZIbEZyeTU5cThtWXRoMm9jdEx5aDZ6UDdnCmlGUzRUOXBZU1daTS9jcm9mTmNvQTg3QnQyRHlkMk5MczZySlRaVTNzWlBINDhycWxRTXNXa25zclNEV3B4VW8KcHQ1ZFhobTBGMkhtd3diVU1BUUtlYTVWMFU3bWI1dmtyVDkrZWhkdUk0RWZtblc4dGY5TUtBcThULzcyT3B2SgowQkw1ajVZMnZhZDRsMGcvQkZiZnRWdlZNTzZ5MlcxNkYvOCtYd3lwZWhHdnEzR1A5YldTeWJQeGVGTTdOZ3FmClV6MUxhV096dXNQcEhGcHZTa1FZaUpRbDIyOTV3cXpZNEExSWR6NEdJeStoNW5FRlhWbFpVQTF1OEUyVHJxTy8KUEx5T1ZVNmtCaVJYcTIwTU9vTFlHZFhkUGt5czlDT3dDcEw1alFJREFRQUJBb0lCQURKTXZ1Y2ZURkY0US80QgpmTnlPWU5YejB6NDZtUkVyWjRNY2w3VWRGdUEvekJMRlY0UDNTT1B3SXF3SSs0K21rZUFJWjJ6OTZwa0hpRjBCCklLYTBoNWN6WmdNd0htNlV5WDByRXZid2FhUGhlZ2g0MWxUd1RDSHQya0dOZjFWR3pCVWlwN3BTVmhtTlFSVFcKMW9zMGltR2UvMUFZK2liQjNPY01VRFhEL0lkcGowN2pmYkEycVNaSndENTJTNnpzUTlnS2VkT2FDY3BaQjJOOQpqV3czblFpcS9obmN4aUt0aTAycWdPZTVsNXQxaStsL2hZUG4yTG9zNUR1dHRNNzJzNXRoaHRUc0VsaGMzbHpkCkRsUld6dGhQWkV4K29OUFdRNlozeHZNUlkzc1N1dVVNK3FxK1BVRSsrQmFaUlJjbUhYbUxEZStRT1N5Y1BhdTEKOUFWSTFEMENnWUVBeXNsUGlqaDNMOU5iYlNCTVZ4YlVsYXBuRVBTL043NmdsaitRb3hRS0hvMTAvZXA3RWo3cgpLUmY5WnhaSHhnbm5wcEdXV0d0SjdRTkZjenRSMUVxWnFZODh3ZmszVm9Ha1RpWUx5OHdOeGZxWGN0MFl6TWxJCmNlTGhhWWZaeURzczhxcmNjZE1KTEszRXFyRTlOZHB6d0FaK0ptWjJJVmg5L0ZPNXBPaUFuTzhDZ1lFQTlGSjEKeEVOc0YrOXY2TXhKRkFSU3BSZmtSRkFwZDQwTHEydURHV1BORVFaN1BNOUJmSzY4UkxOV3RiclBSU2xMN0RCKwpjNnhIQzFoQVpLYU52bHZXZDNSMlk1VisvNWJpelJSUnBZU1ZSd05JWUJXaWU2NDFVRndwalA2V3gwekdBQ3UyCjFZcGtRQm5aNGE1MWl1MW9KYUNSek9GSmdsSlVpaTUzRUMzeWlVTUNnWUVBa2dnMHNtb0ZVcmlYSDFmaUFkbGMKRDhlZDN6VVJPdmlaTm5uaUU3NUxwMExoSERXdW1TNGNOUVNrcEljRCt0YUpMb2VyU0ZOQzhsNm50ZHJqQzhrSgpMWFVNSVBmeVpPYUpSd25ZOXRNa25Bemc0WVBjNXlTUWVnc1RudWFJNjh2Smk1dUZrcWFSOWMzUlVjYS9PTGZ2CklUckx2NldMcm1uR21GNUcwejNuMkpzQ2dZRUF0SjFBOGhYbGtzd3VycXBXVzdYV1lyV0d5Zmw0cmloV3VDS0MKaUFKL1ZsYTBRLy96S1hrRE5NWmZFM2xHUUpxR3hkUVRwdTkwbGE1bjdBQTBTTVViaHJOUjBjeHlWZi8xS2lZYgpOWUVOMmJGVGo3UnVxWC9mYWNpMzdzTkdNNDlOMEZLQWx0djN3R3RiNXJwUnFxSldtM3BZVGwwOU9sb2lwUVEwCmdJRjNDb0VDZ1lBamxjOUZJVHFTMVRtb0xmek5VaDBZRElLaS8weHlQYWtHNXpBejhkMkVka1dQeVoxMUNXRWYKNlgwNERrc0QyejFmcDR0Y2ZPMlhJQjVBRFRzRUhpOTREVVMyc3FLZUM0c1krMXlwUlZFTy9PazJtaUFDN3IzMwpjaVFpa2JNbzFVWTBZdm16YWYwM0ZQdTJKSGsrVVlCcytwNUcrUDc1aC9pOXg3KzJmTWg4c1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  `;
  return temp;
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  const authorization =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
